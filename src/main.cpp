// –ö–æ–¥ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —É–º–Ω–æ–π —Ä–æ–∑–µ—Ç–∫–µ Tuya  local –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É 3.3
#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <ESPmDNS.h>
#include "AsyncTCP.h"
#include "ESPAsyncWebServer.h"
#include "Tuya.h"
#include "VoltmeterESP32.h"
#include "webSocketFunction.h"
#include <ArduinoJson.h>
#include <algorithm>
#include <vector>
#include "logger.h"
#include "telegramm.h"

const char *ApSsid PROGMEM = "SESTuya";        // –ò–º—è —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
const char *ApPassword PROGMEM = "1234567890"; // –ü–∞—Ä–æ–ª—å —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
#define MYTZ "EET-2EEST,M3.5.0/3,M10.5.0/4"    // –ö–∏–µ–≤ https://remotemonitoringsystems.ca/time-zone-abbreviations.php
constexpr u16_t localPort PROGMEM = 8888;      // –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
constexpr float vRef = 3.271;                  // 3.3 –≤–æ–ª—å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ú–µ–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –µ–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –µ—Å–ø.
constexpr u16_t R1 = 100, R2 = 20;             // –†–µ–∑–∏—Å—Ç–∏–≤–Ω—ã–π –¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏. R1 –≤–µ—Ä—Ö–Ω–∏–π.
const char *logFile PROGMEM = "/log.txt";
const char *settingsFile PROGMEM = "/settings.bin";
// float LONGITUDE = 35.186532, LATITUDE = 47.794765;// GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ó–∞–ø–æ—Ä–æ–∂—å–µ-1 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
// byte TimeZone = 2;

LOGGER Logger(logFile);
AsyncWebServer webServer(80);
AsyncWebSocket webSocket("/ws");
AsyncWebSocket webSocketVoltage("/ws2");
Tuya Rozetka;
#ifdef ARDUINO_ESP32S3_DEV
#define ADCpin GPIO_NUM_11
#elif ARDUINO_ESP32_DEV
#define ADCpin GPIO_NUM_32
#endif
VoltmetrESP32 battery(ADCpin, R1, R2, vRef); // GPIO_NUM_32 –¥–ª—è esp32 –∏ GPIO_NUM_11 –¥–ª—è ESP32S3
time_t startTime, endTime;

RTC_NOINIT_ATTR bool tuyaSwith;

// –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã
bool compareVmax(float V, float Vmax, bool *tuyaState, u32_t delayMin);
bool compareVmin(float V, float Vmin, bool *tuyaState, u32_t delayMin);

void setup()
{
  Serial.begin(115200);
  delay(5000);
  __cplusplus; // –í–µ—Ä—Å–∏—è –°++
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if (esp_reset_reason() == ESP_RST_POWERON)
    tuyaSwith = settings.tuyaSwith;
  else
    settings.tuyaSwith = tuyaSwith; // –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ RTC.

  Serial.printf("\nTuyaSwith = %s.\n", tuyaSwith ? "true" : "false");
  Rozetka.devIp = settings.getTuyaIp();
  Rozetka.devId = settings.tuyaDevId;
  Rozetka.localKey = settings.tuyaLocalKey;
  WiFi.mode(WIFI_STA);
  WiFi.setAutoReconnect(true);
  WiFi.begin(settings.wifiSsid, settings.wifiPass);
  Serial.printf("–°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ %s, –ø–∞—Ä–æ–ª—å %s\n", settings.wifiSsid, settings.wifiPass);
  while (WiFi.status() != WL_CONNECTED && millis() < 10000)
  {
    Serial.print(".");
    delay(100);
  }

  if (WiFi.status() == WL_CONNECTED)
  {
    Serial.printf("–í–¥–∞–ª—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Wi-Fi, ip: %s\n", WiFi.localIP().toString().c_str()); // const Printable& x
    configTzTime(MYTZ, "time.google.com"), "time.windows.com", "pool.ntp.org";
    setupTelegramBot();
  }
  else
  {
    delay(100);
    WiFi.mode(WIFI_AP);
    WiFi.softAP(ApSsid, ApPassword);
    Serial.printf("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ %s –Ω–µ –≤–¥–∞–ª–æ—Å—è. –ó–∞–ø—É—â–µ–Ω–∞ —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø—É %s, –ø–∞—Ä–æ–ª—å %s. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ esp.local –∞–±–æ 192.168.4.1 –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.\n", settings.wifiSsid, ApSsid, ApPassword);
    Logger.print(F("WIFI_AP start."));
  }

  Logger.reset_reason();

  MDNS.begin("esp");                                             // esp.local
  webServer.on("/", HTTP_GET, [](AsyncWebServerRequest *request) // –æ—Ç–∫—Ä index.html –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ—Ä–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
               { request->send(LittleFS, F("/settings.html"), F("text/html")); });

  webServer.on("/tuyaSwithUserPush", HTTP_GET, [](AsyncWebServerRequest *request)
               {    if (!request->hasParam("state")) {request->send(400, F("text/plain"), F("Missing 'state' parameter")); return;}
    String stateStr = request->getParam("state")->value();
    bool state = (stateStr == "1" || stateStr.equalsIgnoreCase(F("true")));
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç

    if (Rozetka.relay(state)) {
        tuyaSwith = state;
        settings.tuyaSwith = state;
        Logger.printf("User push relay: %s", state ? "On" : "Off");
        request->send(200, F("text/plain"), state ? "1" : "0");
    } else {
        request->send(500, F("text/plain"), F("Failed to switch Tuya"));
    } });

  // http://192.168.1.254/deletelog?deletelog=true
  webServer.on("/deletelog", HTTP_GET, [](AsyncWebServerRequest *request)
               {    if (!request->hasParam("deletelog")) {request->send(400, F("text/plain"), F("Missing 'state' parameter")); return;}
    String stateStr = request->getParam("deletelog")->value();
    bool state = (stateStr == "1" || stateStr.equalsIgnoreCase("true"));
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç

    if (state) {
        request->send(200, F("text/plain"), Logger.deleteLog() ? F("Log file deleted.") : F("Failed to delete log file"));
    } else {
        request->send(500, F("text/plain"), F("Incorrect deletion log request. tap command:  /deletelog?deletelog=true"));
    } });

  webServer.serveStatic("/", LittleFS, "/"); // –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª–∏ –Ω–∞ HTTP –∑–∞–ø–∏—Ç–∏ –∑ –§–°
  webServer.begin();
  webServer.addHandler(&webSocket);
  webServer.addHandler(&webSocketVoltage);
  webSocket.onEvent(webSocketEvent);
  webSocketVoltage.onEvent(webSocketEventVoltage);
  // onTuyaUserEvent = TuyaSwithWeb_cb;                              // –ù–∞–∑–Ω–∞—á–∞–µ–º callback –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞ –≤ –≤–µ–±–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
  while (!Rozetka.relay(tuyaSwith) and millis() < 10000) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–∑–µ—Ç–∫—É –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    yield();
  battery.begin(); // –í–∫–ª—é—á–∞–µ–º –≤–æ–ª—å—Ç–º–µ—Ç—Ä
  startTime = time(&startTime);
}

void loop()
{
  Logger.wifi_disconect();
  if (WiFi.getMode() != WIFI_MODE_AP and WiFi.status() != WL_CONNECTED)
  {
    static byte attempt = 0;
    if (attempt++ >= 50) // 5 –º–∏–Ω—É—Ç
    {
      Logger.print(F("WiFi.status() != WL_CONNECTED -> ESP.restart()"));
      ESP.restart();
    }
    if (!WiFi.reconnect())
    {
      esp_wifi_disconnect();
      esp_wifi_stop();
      delay(100);
      esp_wifi_start();
      delay(100);
      esp_wifi_connect();
    }
    delay(6000);
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ WIFI_MODE_AP 5 –º–∏–Ω
  static u32_t prevMillisAP = 0;
  if (WiFi.getMode() == WIFI_MODE_AP and (millis() - prevMillisAP) > (5UL * 60UL * 1000UL))
  { // 5 –º–∏–Ω—É—Ç –∂–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (WiFi.softAPgetStationNum() > 0)
      prevMillisAP = millis();
    else
    {
      Logger.print(F("WIFI_MODE_AP > 5 min without client`s -> ESP.restart()"));
      ESP.restart();
    }
  }

  static u32_t prevMillisLog = 0;
  if ((millis() - prevMillisLog) > (30UL * 60UL * 1000UL))
  {
    prevMillisLog = millis();
    Logger.printf("Ubat = %.3f", battery.getVoltage());
  }

  static u32_t prevMillis = 0;
  if ((millis() - prevMillis) > 500) // –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  {
    prevMillis = millis();
    battery.measure();
    JsonDocument doc;
    doc["bat4"] = battery.getVoltage();
    time(&endTime);
    time_t elapsed = endTime - startTime;
    doc["sistemTime"] = elapsed;
    doc["freeHeap"] = ESP.getFreeHeap();
    doc["FSfree"] = LittleFS.totalBytes() - LittleFS.usedBytes();
    doc["tuyaSwith"] = tuyaSwith;
    String jsonData;
    serializeJson(doc, jsonData);
    if (webSocketVoltage.count() and webSocketVoltage.availableForWriteAll())
      webSocketVoltage.textAll(jsonData);
    if (compareVmax(battery.getVoltage(), settings.bataryVoltageMax, &tuyaSwith, settings.timer) or
        compareVmin(battery.getVoltage(), settings.bataryVoltageMin, &tuyaSwith, settings.timer))
    {
      settings.tuyaSwith = tuyaSwith;
    }
  }
  yield();
  loopTelegram();
}

inline bool compareVmax(float V, float Vmax, bool *tuyaState, u32_t delayMin)
{
  static u32_t prevMillis = 0;
  static bool startTimer = false;
  if (V >= Vmax and *tuyaState == LOW and startTimer == false)
  {
    prevMillis = millis();
    startTimer = true;
  }
  if (startTimer == true and ((millis() - prevMillis) > (delayMin * 60 * 1000 + 1000)))
  {
    if (Rozetka.on())
    {
      *tuyaState = HIGH;
      startTimer = false;
      Logger.printf("Rozetka.on Ubat=%.3fV => Vmax = %.3fV", battery.getVoltage(), settings.bataryVoltageMax);
      return true;
    }
  }
  return false;
}

inline bool compareVmin(float V, float Vmin, bool *tuyaState, u32_t delayMin)
{
  static u32_t prevMillis = 0;
  static bool startTimer = false;
  if (V <= Vmin and *tuyaState == HIGH and startTimer == false)
  {
    prevMillis = millis();
    startTimer = true;
  }
  if (startTimer == true and ((millis() - prevMillis) > (delayMin * 60 * 1000 + 1000)))
  {
    if (Rozetka.off())
    {
      *tuyaState = LOW;
      startTimer = false;
      Logger.printf("Rozetka.off  %.3fV <= Vmin = %.3fV.", battery.getVoltage(), settings.bataryVoltageMin);
      return true;
    }
  }
  return false;
}

// –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ—É—Ç–µ—Ä:
// –ó–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–æ—É—Ç–µ—Ä–∞:
// üëâ –û–±—ã—á–Ω–æ —ç—Ç–æ http://192.168.0.1 –∏–ª–∏ http://192.168.1.1

// –ù–∞–π–¥–∏ —Ä–∞–∑–¥–µ–ª:
// Port Forwarding, Virtual Server, NAT, –∏–ª–∏ Advanced > NAT Forwarding

// –î–æ–±–∞–≤—å –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ:

// –ü–æ–ª–µ	–ó–Ω–∞—á–µ–Ω–∏–µ
// –ò–º—è/–û–ø–∏—Å–∞–Ω–∏–µ	ESP32
// –í–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç	12345 (–ª—é–±–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç)
// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP	192.168.1.123 (IP ESP32)
// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç	80 (–µ—Å–ª–∏ ESP32 –Ω–∞ –ø–æ—Ä—Ç—É 80)
// –ü—Ä–æ—Ç–æ–∫–æ–ª	TCP (–∏–ª–∏ TCP/UDP)

// –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ No-IP
// –ü–æ–ª–µ	–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å
// –°–µ—Ä–≤–∏—Å	No-IP
// –ò–º—è —Ö–æ—Å—Ç–∞	partizanska.ddns.net
// –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è	Email, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É–∫–∞–∑–∞–ª –≤ No-IP nesj5kp@ddnskey.com
// –ü–∞—Ä–æ–ª—å	–ü–∞—Ä–æ–ª—å –æ—Ç No-IP DiT9EztcyARr
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å	WAN / –ò–Ω—Ç–µ—Ä–Ω–µ—Ç
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ	–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ (—Ä–æ—É—Ç–µ—Ä —Å–∞–º –æ–±–Ω–æ–≤–ª—è–µ—Ç IP)

// ‚úÖ –í–∫–ª—é—á–∏ –æ–ø—Ü–∏—é ¬´Enable DDNS¬ª –∏–ª–∏ ¬´–û–±–Ω–æ–≤–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏¬ª

// –ü—Ä–æ–±—Ä–æ—Å–∏—Ç—å –ø–æ—Ä—Ç:
// –ù–∞–ø—Ä–∏–º–µ—Ä:

// –í–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç: 12345

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP: 192.168.1.123 (ESP32)

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç: 80

// üîó –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ ESP32 –∏–∑–≤–Ω–µ:
// arduino
// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
// http://partizanska.ddns.net:12345